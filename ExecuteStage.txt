library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ExecuteStage is
    Port (
        RegWrite, MemToReg, MemWrite : in std_logic;
        ALUControl : in std_logic_vector(3 downto 0);
        ALUSrc : in std_logic;
        RegDst : in std_logic;
        RegSrcA, RegSrcB : in std_logic_vector(31 downto 0);
        RtDest, RdDest : in std_logic_vector(4 downto 0);
        SignImm : in std_logic_vector(31 downto 0);
        RegWriteOut, MemToRegOut, MemWriteOut : out std_logic;
        ALUResult, WriteData : out std_logic_vector(31 downto 0);
        WriteReg : out std_logic_vector(4 downto 0)
    );
end ExecuteStage;

architecture Behavioral of ExecuteStage is
    signal ALUSrcTemp : std_logic_vector(31 downto 0);

    component ALU32 is 
        generic (N : integer := 32);
        port (
            in1 : in std_logic_vector(N - 1 downto 0);
            in2 : in std_logic_vector(N - 1 downto 0);
            OP : in std_logic_vector(3 downto 0);
            out1 : out std_logic_vector(N - 1 downto 0)
        );
    end component;

begin
    ALU: ALU32
    generic map (N => 32)
    port map (
        in1 => RegSrcA,
        in2 => ALUSrcTemp,
        OP => ALUControl,
        out1 => ALUResult
    );

    process (ALUSrc, SignImm, RegSrcB)
    begin
        if ALUSrc = '0' then
            ALUSrcTemp <= RegSrcB;
        else 
            ALUSrcTemp <= SignImm;
        end if;
    end process;

    process (RegDst, RtDest, RdDest)
    begin
        if RegDst = '0' then
            WriteReg <= RtDest;
        else
            WriteReg <= RdDest;
        end if;
    end process;

    MemWriteOut <= MemWrite;
    MemToRegOut <= MemToReg;
    RegWriteOut <= RegWrite;
    WriteData <= RegSrcB;

end Behavioral;
