library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity carry_save_mul is
    generic(N : integer := 32);
     Port( 
       A , B : in std_logic_vector(N/2   - 1 downto 0);
       Product : out std_logic_vector(N - 1 downto 0) 
     );
end carry_save_mul;

architecture Behavioral of carry_save_mul is
    type rcarray is array (N/2 -1 downto 0) of std_logic_vector(N/2 -1 downto 0); 
    signal sum_result : rcarray := ((others => (others => '0')));
    signal carry_result : rcarray := ((others => (others => '0')));
    signal and_result : rcarray  := ((others => (others => '0')));
    component full_adder is
        port(
            a, b, cin : in std_logic;
            sum, cout : out std_logic
        );
    end component full_adder;
begin
    
    row_store : for i in 0 to n/2 - 1 generate
        col_store : for j in 0 to n/2 - 1 generate
              and_result(i)(j) <= A(j) and B(i);
            first_col : if i = 1 and j = 0 generate --- rows = i and cols = j
                first_fa: full_adder port map(
                    a => and_result(i)(j),
                    b => and_result(i-1)(j+1),
                    cin => '0',
                    sum => Product(i),
                    cout => carry_result(i)(j)
                );   
                end generate first_col;          
            middle_cols : if i = 1 and j > 0 and j < N/2 - 1 generate
                 middle_fa :   full_adder port map(
                    a => and_result(i)(j),
                    b => and_result(i-1)(j+1),
                    cin => carry_result(i)(j-1),
                    sum => sum_result(i)(j),
                    cout => carry_result(i)(j)
                );
                end generate middle_cols;
            last_col : if i = 1 and j = N/2 - 1 generate
                 last_fa : full_adder port map(
                    a => and_result(i)(j),
                    b => '0',
                    cin => carry_result(i)(j-1),
                    sum => sum_result(i)(j),
                    cout => carry_result(i)(j)
                ); 
                end generate last_col;
                
                
            first_middle_fa : if i > 1 and i < N/2 - 1 and j = 0 generate --- rows = i and cols = j
                first_fa: full_adder port map(
                    a => and_result(i)(j),
                    b => sum_result(i-1)(j+1),
                    cin => '0',
                    sum => Product(i),
                    cout => carry_result(i)(j)
                );   
                end generate first_middle_fa;          
            middle_middle_fa : if i > 1 and i < N/2 - 1 and j > 0 and j < N/2 - 1 generate
                 middle_fa :   full_adder port map(
                    a => and_result(i)(j),
                    b => sum_result(i-1)(j+1),
                    cin => carry_result(i)(j-1),
                    sum => sum_result(i)(j),
                    cout => carry_result(i)(j)
                );
                end generate middle_middle_fa;
            last_middle_fa : if i > 1 and j = N/2 - 1 generate
                 last_fa : full_adder port map(
                    a => and_result(i)(j),
                    b => carry_result(i-1)(j),
                    cin => carry_result(i)(j-1),
                    sum => sum_result(i)(j),
                    cout => carry_result(i)(j)
                ); 
                end generate last_middle_fa;
         
            last_firstrow_fa : if i = n/2 - 1 and j = 0 generate --- rows = i and cols = j
                first_fa: full_adder port map(
                    a => and_result(i)(j),
                    b => sum_result(i-1)(j+1),
                    cin => '0',
                    sum => Product(i),
                    cout => carry_result(i)(j)
                );   
                end generate last_firstrow_fa;          
            last_midmiddle_fa : if i = N/2 - 1 and j > 0 and j < N/2 - 1 generate
                 middle_fa :   full_adder port map(
                    a => and_result(i)(j),
                    b => sum_result(i-1)(j+1),
                    cin => carry_result(i)(j-1),
                    sum => product(i + j),
                    cout => carry_result(i)(j)
                );
                end generate last_midmiddle_fa;
            last_last_fa : if i = N/2 - 1 and j = N/2 - 1 generate
                 last_fa : full_adder port map(
                    a => and_result(i)(j),
                    b => carry_result(i-1)(j),
                    cin => carry_result(i)(j-1),
                    sum => product(i+j),
                    cout => product(i+j+1)
                ); 
                end generate last_last_fa;
                
               
        end generate;
        end generate;
        Product(0) <= and_result(0)(0);
end Behavioral;
