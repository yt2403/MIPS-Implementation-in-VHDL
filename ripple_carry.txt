library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ripple_carry_fa is
    generic(N : integer := 4);
    Port (
        A, B : in std_logic_vector(N - 1 downto 0);
        OP : in std_logic;
        Sum : out std_logic_vector(N - 1 downto 0)
    );
end ripple_carry_fa;

architecture structural of ripple_carry_fa is
    component full_adder is
        port(
            a, b, cin : in std_logic;
            sum, cout : out std_logic
        );
    end component full_adder;
    
    signal carry : std_logic_vector(N-1 downto 0) := (others => '0');
    signal twocompB : std_logic_vector(N - 1 downto 0);
    
begin

    convert_b_2comp: for i in 0 to N - 1 generate
        twocompB(i) <= B(i) xor OP; -- checks for the op code, if 1 sub otherwise add
    end generate;
    
    add_1_to_2_comp: full_adder port map(
        a => A(0),
        b => twocompB(0),
        cin => OP, -- checks to see if it is 2's comp. if so add 1 to indicate subtraction and complete 2's comp
        sum => Sum(0),
        cout => carry(0)
    );
    
    finish_fa: for i in 1 to N - 1 generate
        full_addr: full_adder port map (
            a => A(i),
            b => twocompB(i),
            cin => carry(i-1),
            sum => Sum(i),
            cout => carry(i)
        );
    end generate;
    
    
  

end structural;
